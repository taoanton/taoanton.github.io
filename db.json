{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/Light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/Light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/Light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/Light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/Light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/Light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/Light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/Light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/Light/source/js/gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes/Light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes/Light/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/Light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":false},{"_id":"themes/Light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":false},{"_id":"themes/Light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":false},{"_id":"themes/Light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":false},{"_id":"source/images/wall-line.jpg","path":"images/wall-line.jpg","modified":false},{"_id":"themes/landscape-plus/source/img/scrollup.png","path":"img/scrollup.png","modified":false},{"_id":"themes/landscape-plus/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape-plus/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1418122381000},{"_id":"scaffolds/page.md","mtime":1418122381000},{"_id":"scaffolds/photo.md","mtime":1418122381000},{"_id":"scaffolds/post.md","mtime":1418122381000},{"_id":"themes/landscape/Gruntfile.js","mtime":1413874132000},{"_id":"themes/landscape/LICENSE","mtime":1413874132000},{"_id":"themes/landscape/README.md","mtime":1413874132000},{"_id":"themes/landscape/_config.yml","mtime":1413874132000},{"_id":"themes/landscape/package.json","mtime":1413874132000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1413874132000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/category.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/index.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/page.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/post.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1413874132000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1413874132000},{"_id":"themes/landscape/source/js/script.js","mtime":1413874132000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/style.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1413874132000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1413874132000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1413874132000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1413874132000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1413874132000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1413874132000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1413874132000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1413874132000},{"_id":"themes/Light/README.md","mtime":1413876683000},{"_id":"themes/Light/_config.yml","mtime":1413876683000},{"_id":"themes/Light/LICENSE","mtime":1413876683000},{"_id":"themes/Light/languages/default.yml","mtime":1413876683000},{"_id":"themes/Light/languages/de.yml","mtime":1413876683000},{"_id":"themes/Light/languages/es.yml","mtime":1413876683000},{"_id":"themes/Light/languages/ru.yml","mtime":1413876683000},{"_id":"themes/Light/languages/zh-CN.yml","mtime":1413876683000},{"_id":"themes/Light/languages/zh-TW.yml","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/blank.gif","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/fancybox_loading@2x.gif","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/fancybox_loading.gif","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/fancybox_overlay.png","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/fancybox_sprite.png","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/fancybox_sprite@2x.png","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/jquery.fancybox.css","mtime":1413876683000},{"_id":"themes/Light/source/fancybox/jquery.fancybox.pack.js","mtime":1413876683000},{"_id":"themes/Light/source/js/gallery.js","mtime":1413876683000},{"_id":"themes/Light/source/js/jquery.imagesloaded.min.js","mtime":1413876683000},{"_id":"themes/Light/source/css/style.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_partial/archive.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_partial/article.styl","mtime":1418176664000},{"_id":"themes/Light/source/css/_partial/comment.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_partial/footer.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_partial/header.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_partial/index.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_partial/sidebar.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_partial/syntax.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_base/layout.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_base/utils.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/_base/variable.styl","mtime":1413876683000},{"_id":"themes/Light/source/css/font/fontawesome-webfont.eot","mtime":1413876683000},{"_id":"themes/Light/source/css/font/fontawesome-webfont.svg","mtime":1413876683000},{"_id":"themes/Light/source/css/font/fontawesome-webfont.ttf","mtime":1413876683000},{"_id":"themes/Light/source/css/font/fontawesome-webfont.woff","mtime":1413876683000},{"_id":"themes/Light/layout/archive.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/category.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/index.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/layout.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/page.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/post.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/tag.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_widget/category.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_widget/recent_posts.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_widget/search.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_widget/tag.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_widget/tagcloud.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/after_footer.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/archive.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/article.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/comment.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/facebook_comment.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/footer.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/google_analytics.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/head.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/header.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/pagination.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/sidebar.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/post/category.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/post/gallery.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/post/share.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/post/tag.ejs","mtime":1413876683000},{"_id":"themes/Light/layout/_partial/post/title.ejs","mtime":1413876683000},{"_id":"source/_posts/about-me.md","mtime":1418122386000},{"_id":"source/_posts/about-this-blog.md","mtime":1421134117000},{"_id":"source/_posts/php-TDD开发.md","mtime":1421133775000},{"_id":"source/images/wall-line.jpg","mtime":1418122386000},{"_id":"themes/flat/README.md","mtime":1418123548000},{"_id":"themes/flat/LICENSE","mtime":1418123548000},{"_id":"themes/flat/_config.yml","mtime":1418124617000},{"_id":"themes/flat/languages/default.yml","mtime":1418124855000},{"_id":"themes/flat/languages/zh-CN.yml","mtime":1418124882000},{"_id":"themes/flat/languages/zh-TW.yml","mtime":1418124889000},{"_id":"themes/flat/layout/archive.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/category.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/index.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/layout.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/page.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/post.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/tag.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_widget/category.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_widget/recent_posts.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_widget/search.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_widget/tag.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_widget/tagcloud.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/after_footer.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/archive.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/article.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/comment.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/footer.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/google_analytics.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/head.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/header.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/pagination.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/sidebar.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/post/gallery.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/post/category.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/post/share.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/post/tag.ejs","mtime":1418123548000},{"_id":"themes/flat/layout/_partial/post/title.ejs","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/blank.gif","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/fancybox_loading.gif","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/fancybox_loading@2x.gif","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/fancybox_overlay.png","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/fancybox_sprite.png","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/fancybox_sprite@2x.png","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/jquery.fancybox.css","mtime":1418123548000},{"_id":"themes/flat/source/fancybox/jquery.fancybox.pack.js","mtime":1418123548000},{"_id":"themes/flat/source/js/gallery.js","mtime":1418123548000},{"_id":"themes/flat/source/js/jquery.imagesloaded.min.js","mtime":1418123548000},{"_id":"themes/flat/source/css/style.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_base/layout.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_base/utils.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_base/variable.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/archive.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/article.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/comment.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/footer.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/header.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/index.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/sidebar.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/_partial/syntax.styl","mtime":1418123548000},{"_id":"themes/flat/source/css/font/fontawesome-webfont.eot","mtime":1418123548000},{"_id":"themes/flat/source/css/font/fontawesome-webfont.svg","mtime":1418123548000},{"_id":"themes/flat/source/css/font/fontawesome-webfont.ttf","mtime":1418123548000},{"_id":"themes/flat/source/css/font/fontawesome-webfont.woff","mtime":1418123548000},{"_id":"themes/landscape-plus/Gruntfile.js","mtime":1421132149000},{"_id":"themes/landscape-plus/LICENSE","mtime":1421132149000},{"_id":"themes/landscape-plus/README.md","mtime":1421132149000},{"_id":"themes/landscape-plus/_config.yml","mtime":1421133174000},{"_id":"themes/landscape-plus/package.json","mtime":1421132149000},{"_id":"themes/landscape-plus/languages/default.yml","mtime":1421132149000},{"_id":"themes/landscape-plus/languages/zh-CN.yml","mtime":1421132149000},{"_id":"themes/landscape-plus/languages/zh-TW.yml","mtime":1421132149000},{"_id":"themes/landscape-plus/scripts/fancybox.js","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/archive.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/category.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/index.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/layout.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/page.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/post.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/tag.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_widget/archive.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_widget/category.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_widget/links.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_widget/recent_posts.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_widget/tag.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_widget/tagcloud.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/after-footer.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/archive-post.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/archive.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/article.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/footer.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/google-analytics.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/head.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/header.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/mathjax.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/mobile-nav.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/sidebar.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/totop.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/post/category.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/post/date.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/post/gallery.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/post/tag.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/layout/_partial/post/title.ejs","mtime":1421132149000},{"_id":"themes/landscape-plus/source/img/scrollup.png","mtime":1421132149000},{"_id":"themes/landscape-plus/source/js/script.js","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_extend.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_variables.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/style.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/archive.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/article.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/comment.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/footer.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/header.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/highlight.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/mobile.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-aside.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-bottom.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_partial/totop.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_util/grid.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/_util/mixin.styl","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","mtime":1421132149000},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1421132149000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1421132149000},{"_id":"source/_posts/satis-config.md","mtime":1421134099000}],"Category":[],"Page":[],"Post":[{"title":"关于我","date":1325317511000,"tags":[],"content":"<p>没读过几年书 误打误撞的进入的程序员这个队伍 开始从事软件开发多年<br>一直以来却做着“简单”的东西 没做过什么“大型”项目也就不写了</p>\n<h2 id=\"Email\">Email</h2>\n<p>taoanton@gmail.com</p>\n<h2 id=\"爱好\">爱好</h2>\n<p><code>运动</code>跑步台球<br><code>web</code>lnamp/html5/javascript<br><code>mobile</code>ios/android<br><code>lang</code>go/nodejs/ruby  </p>\n","source":"_posts/about-me.md","raw":"title: 关于我\ndate: 2011-12-31 15:45:11\ntags:\n---\n\n\n没读过几年书 误打误撞的进入的程序员这个队伍 开始从事软件开发多年\n一直以来却做着“简单”的东西 没做过什么“大型”项目也就不写了\n\n##Email\ntaoanton@gmail.com\n\n##爱好\n`运动`跑步台球  \n`web`lnamp/html5/javascript  \n`mobile`ios/android  \n`lang`go/nodejs/ruby  \n","slug":"about-me","updated":1421134256000,"excerpt":"","_id":"41oqfrhe0ivu9ahf","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"关于为什么要写博客","date":1337586025000,"tags":["64quig3qq9nst2f8"],"content":"<p>经常在网上看别人的博客，由于自己比较懒没有坚持写博客 只是零星的在新浪博客、百度空间、博客园写了一些技术方面的 并且很多还都是转载<br>还有一个原因就是对这些博客的写作方式都不满意，当我看到markdown语法的时候发现，这么简洁的语法非常适合我，于是又开始了我的blog</p>\n<p>以下是比较喜欢的blog<br><a href=\"http://coolshell.cn/\" target=\"_blank\" rel=\"external\">http://coolshell.cn/</a> （酷壳）<br><a href=\"http://beyondvincent.com/（破船之家）\" target=\"_blank\" rel=\"external\">http://beyondvincent.com/（破船之家）</a><br><a href=\"http://www.ruanyifeng.com/blog/\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/</a> (阮一峰)</p>\n<p>blog用到的软件Hexo 官方网站：<a href=\"http://hexo.io\" target=\"_blank\" rel=\"external\">http://hexo.io</a></p>\n<p>用hexo搭建博客参照了一下文章</p>\n<p><a href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\" rel=\"external\">http://blog.fens.me/hexo-blog-github/</a><br><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">http://ibruce.info/2013/11/22/hexo-your-blog/</a><br><a href=\"http://zipperary.com/categories/hexo/\" target=\"_blank\" rel=\"external\">http://zipperary.com/categories/hexo/</a></p>\n","source":"_posts/about-this-blog.md","raw":"title: 关于为什么要写博客\ndate: 2012-5-21 15:40:25\ntags: taoanton的博客\n---\n\n\n经常在网上看别人的博客，由于自己比较懒没有坚持写博客 只是零星的在新浪博客、百度空间、博客园写了一些技术方面的 并且很多还都是转载\n还有一个原因就是对这些博客的写作方式都不满意，当我看到markdown语法的时候发现，这么简洁的语法非常适合我，于是又开始了我的blog\n\n以下是比较喜欢的blog\nhttp://coolshell.cn/ （酷壳）\nhttp://beyondvincent.com/（破船之家）\nhttp://www.ruanyifeng.com/blog/ (阮一峰)\n\n\nblog用到的软件Hexo 官方网站：http://hexo.io\n\n用hexo搭建博客参照了一下文章\n\nhttp://blog.fens.me/hexo-blog-github/\nhttp://ibruce.info/2013/11/22/hexo-your-blog/  \nhttp://zipperary.com/categories/hexo/\n","slug":"about-this-blog","updated":1421134252000,"excerpt":"","_id":"qvs5uvfp4qqnhs0e","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"PHP测试驱动开发","date":1419061511000,"tags":["b7zecapjmpjw0wbh"],"content":"<h1 id=\"php_测试驱动开发_TDD\">php 测试驱动开发 TDD</h1>\n<h1 id=\"PHP开发分享\">PHP开发分享</h1>\n<ul>\n<li><a href=\"#tdd\">测试驱动开发</a>  <ul>\n<li><a href=\"#phpunit\">phpunit</a>  <ul>\n<li><a href=\"#assert\">断言测试</a>  </li>\n<li><a href=\"#mock\">测试替身</a>  </li>\n<li><a href=\"#phpunitCommondLine\">命令行测试</a>  </li>\n<li><a href=\"#coverage\">代码覆盖率报告</a>  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#phpCodeSniffer\">PHP CodeSniffer  PHP代码探测器检查编码标准</a></li>\n<li><a href=\"#phpDocumentor\">PHPDocumentor api文档生成工具</a>  </li>\n<li><a href=\"#php-fig\">PHP-FIG 框架互操作组 PHP编码规范</a>  </li>\n<li><a href=\"#phptherightway\">PHP the right way PHP学习指南</a>  </li>\n</ul>\n<p><a name=\"tdd\"></a></p>\n<h2 id=\"测试驱动开发(TDD)\">测试驱动开发(TDD)</h2>\n<p>测试驱动开发（Test-driven development）是极限编程中倡导的程序开发方法，以其倡导先写测试程序，然后编码实现其功能得名。测试驱动开发始于20世纪90年代。测试驱动开发的目的是取得快速反馈并使用“illustrate the main line”方法来构建程序。</p>\n<h3 id=\"TDD的目标\">TDD的目标</h3>\n<p><code>Clean Code That Works</code></p>\n<p>这句话的含义是，事实上我们只做两件事情：让代码奏效（Work）和让代码洁净（Clean），前者是把事情做对，后者是把事情做好。想想看，其实 我们平时所做的所有工作，除去无用的工作和错误的工作以外，真正正确的工作，并且是真正有意义的工作，其实也就只有两大类：增加功能和提升设计，而TDD 正是在这个原则上产生的。如果您的工作并非我们想象的这样，（这意味着您还存在第三类正确有意义的工作，或者您所要做的根本和我们在说的是两回事），那么 这告诉我们您并不需要TDD，或者不适用TDD。而如果我们偶然猜对（这对于我来说是偶然，而对于Kent Beck和Martin Fowler这样的大师来说则是辛勤工作的成果），那么恭喜您，TDD有可能成为您显著提升工作效率的一件法宝。请不要将信将疑，若即若离，因为任何一项 新的技术——只要是从根本上改变人的行为方式的技术——就必然使得相信它的人越来越相信，不信的人越来越不信。这就好比学游泳，唯一能学会游泳的途径就是 亲自下去游，除此之外别无他法。这也好比成功学，即使把卡耐基或希尔博士的书倒背如流也不能拥有积极的心态，可当你以积极的心态去成就了一番事业之后，你 就再也离不开它了。相信我，TDD也是这样！想试用TDD的人们，请遵循下面的步骤：</p>\n<h3 id=\"TDD的优点\">TDD的优点</h3>\n<p>『充满吸引力的优点』</p>\n<p>1.完工时完工。表明我可以很清楚的看到自己的这段工作已经结束了，而传统的方式很难知道什么时候编码工作结束了。<br>2.全面正确的认识代码和利用代码，而传统的方式没有这个机会。<br>3.为利用你成果的人提供Sample，无论它是要利用你的源代码，还是直接重用你提供的组件。<br>4.开发小组间降低了交流成本，提高了相互信赖程度。<br>5.避免了过渡设计。<br>6.系统可以与详尽的测试集一起发布，从而对程序的将来版本的修改和扩展提供方便。<br>7.TDD给了我们自信，让我们今天的问题今天解决，明天的问题明天解决，今天不能解决明天的问题   ，因为明天的问题还没有出现(没有TestCase)，除非有TestCase否则我决不写任何代码；明天也不必担心今天的问题，只要我亮了绿灯。  </p>\n<p>『不显而易见的优点』</p>\n<p>8.逃避了设计角色。对于一个敏捷的开发小组，每个人都在做设计。<br>9.大部分时间代码处在高质量状态，100％的时间里成果是可见的。<br>10.由于可以保证编写测试和编写代码的是相同的程序员，降低了理解代码所花费的成本。<br>11.为减少文档和代码之间存在的细微的差别和由这种差别所引入的Bug作出杰出贡献。<br>12.在预先设计和紧急设计之间建立一种平衡点，为你区分哪些设计该事先做、哪些设计该迭代时做提供了一个可靠的判断依据。</p>\n<p>『有争议的优点』</p>\n<p>13.事实上提高了开发效率。每一个正在使用TDD并相信TDD的人都会相信这一点，但观望者则不同，不相信TDD的人甚至坚决反对这一点，这很正常，世界总是这样。<br>14.发现比传统测试方式更多的Bug。<br>15.使IDE的调试功能失去意义，或者应该说，避免了令人头痛的调试和节约了调试的时间。<br>16.总是处在要么编程要么重构的状态下，不会使人抓狂。（两顶帽子）<br>17.单元测试非常有趣。</p>\n<p>TDD的步骤</p>\n<blockquote>\n<p>编写TestCase  —&gt; 实现TestCase  —&gt; 重构<br>（不可运行） &nbsp; &nbsp; &nbsp; &nbsp;（可运行）   &nbsp;    &nbsp; &nbsp; （重构） </p>\n</blockquote>\n<table><tr><td>(1) 快速新增一个测试用例  </td><td>新的TestCase</td></tr><tr><td>(2) 编译所有代码，刚刚写的那个测试很可能编译不通过</td><td>原始的TODO List</td></tr><tr><td>(3) 做尽可能少的改动，让编译通过</td><td>Interface</td></tr><tr><td>(4) 运行所有的测试，发现最新的测试不能编译通过</td><td>－(Red Bar) </td></tr><tr><td>(5) 做尽可能少的改动，让测试通过 </td><td>Implementation</td></tr><tr><td>(6) 运行所有的测试，保证每个都能通过 </td><td>－(Green Bar) </td></tr><tr><td>(7) 重构代码，以消除重复设计</td><td>Clean Code That Works</td></tr></table>\n\n<p>书籍：</p>\n<blockquote>\n<p> 测试驱动开发 <a href=\"http://book.douban.com/subject/25735501/\" target=\"_blank\" rel=\"external\">http://book.douban.com/subject/25735501/</a></p>\n</blockquote>\n<p>练习：</p>\n<blockquote>\n<p> <a href=\"https://github.com/daylerees/test-driven-development-example\" target=\"_blank\" rel=\"external\">https://github.com/daylerees/test-driven-development-example</a></p>\n</blockquote>\n<p><a name=\"phpunit\"></a></p>\n<h2 id=\"phpunit\">phpunit</h2>\n<p>PHPUnit是一个轻量级的PHP测试框架， 当前最新版本 PHPUnit 4.4.0</p>\n<blockquote>\n<p> <a href=\"https://phpunit.de/\" target=\"_blank\" rel=\"external\">https://phpunit.de/</a></p>\n</blockquote>\n<h3 id=\"安装_（linux）\">安装 （linux）</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://phar.phpunit.de/phpunit.phar  </div><div class=\"line\">$ chmod  +x phpunit.phar  </div><div class=\"line\">$ <span class=\"built_in\">sudo</span> mv phpunit.phar /usr/local/bin/phpunit</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 其他平台安装方式请参考PHPUnit手册第1章</p>\n</blockquote>\n<p>phpunit默认执行指定目录下*Test.php文件中的测试用例，并且是迭代的遍历所有子目录。phpunit命令提供了一些可选参数，可以使得批量处理Test Case变得容易。</p>\n<p><a name=\"assert\"></a></p>\n<h2 id=\"phpunit断言\">phpunit断言</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">布尔类型</div><div class=\"line\">assertTrue   断言为真</div><div class=\"line\">assertFalse  断言为假</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NULL</span>类型</div><div class=\"line\">assertNull    断言为<span class=\"built_in\">NULL</span></div><div class=\"line\">assertNotNull  断言非<span class=\"built_in\">NULL</span></div><div class=\"line\"></div><div class=\"line\">数字类型</div><div class=\"line\">assertEquals             断言等于</div><div class=\"line\">assertNotEquals          断言不等于</div><div class=\"line\">assertGreaterThan        断言大于</div><div class=\"line\">assertGreaterThanOrEqual 断言大于等于</div><div class=\"line\">assertLessThan           断言小于</div><div class=\"line\">assertLessThanOrEqual    断言小于等于</div><div class=\"line\"></div><div class=\"line\">字符类型</div><div class=\"line\">assertEquals          断言等于</div><div class=\"line\">assertNotEquals       断言不等于</div><div class=\"line\">assertContains        断言包含</div><div class=\"line\">assertNotContains     断言不包含</div><div class=\"line\">assertContainsOnly    断言只包含</div><div class=\"line\">assertNotContainsOnly 断言不只包含</div><div class=\"line\"></div><div class=\"line\">数组类型</div><div class=\"line\">assertEquals          断言等于</div><div class=\"line\">assertNotEquals       断言不等于</div><div class=\"line\">assertArrayHasKey     断言有键</div><div class=\"line\">assertArrayNotHasKey  断言没有键</div><div class=\"line\">assertContains        断言包含</div><div class=\"line\">assertNotContains     断言不包含</div><div class=\"line\">assertContainsOnly    断言只包含</div><div class=\"line\">assertNotContainsOnly 断言不只包含</div><div class=\"line\"></div><div class=\"line\">对象类型</div><div class=\"line\">assertAttributeContains           断言属性包含</div><div class=\"line\">assertAttributeContainsOnly       断言属性只包含</div><div class=\"line\">assertAttributeEquals             断言属性等于</div><div class=\"line\">assertAttributeGreaterThan        断言属性大于</div><div class=\"line\">assertAttributeGreaterThanOrEqual 断言属性大于等于</div><div class=\"line\">assertAttributeLessThan           断言属性小于</div><div class=\"line\">assertAttributeLessThanOrEqual    断言属性小于等于</div><div class=\"line\">assertAttributeNotContains        断言不包含</div><div class=\"line\">assertAttributeNotContainsOnly    断言属性不只包含</div><div class=\"line\">assertAttributeNotEquals          断言属性不等于</div><div class=\"line\">assertAttributeNotSame            断言属性不相同</div><div class=\"line\">assertAttributeSame               断言属性相同</div><div class=\"line\">assertSame                        断言类型和值都相同</div><div class=\"line\">assertNotSame                     断言类型或值不相同</div><div class=\"line\">assertObjectHasAttribute          断言对象有某属性</div><div class=\"line\">assertObjectNotHasAttribute       断言对象没有某属性</div><div class=\"line\"></div><div class=\"line\">class类型</div><div class=\"line\">class类型包含对象类型的所有断言，还有</div><div class=\"line\">assertClassHasAttribute          断言类有某属性</div><div class=\"line\">assertClassHasStaticAttribute    断言类有某静态属性</div><div class=\"line\">assertClassNotHasAttribute       断言类没有某属性</div><div class=\"line\">assertClassNotHasStaticAttribute 断言类没有某静态属性</div><div class=\"line\"></div><div class=\"line\">文件相关</div><div class=\"line\">assertFileEquals     断言文件内容等于</div><div class=\"line\">assertFileExists     断言文件存在</div><div class=\"line\">assertFileNotEquals  断言文件内容不等于</div><div class=\"line\">assertFileNotExists  断言文件不存在</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">XML</span>相关</div><div class=\"line\">assertXmlFileEqualsXmlFile        断言<span class=\"built_in\">XML</span>文件内容相等</div><div class=\"line\">assertXmlFileNotEqualsXmlFile     断言<span class=\"built_in\">XML</span>文件内容不相等</div><div class=\"line\">assertXmlStringEqualsXmlFile      断言<span class=\"built_in\">XML</span>字符串等于<span class=\"built_in\">XML</span>文件内容</div><div class=\"line\">assertXmlStringEqualsXmlString    断言<span class=\"built_in\">XML</span>字符串相等</div><div class=\"line\">assertXmlStringNotEqualsXmlFile   断言<span class=\"built_in\">XML</span>字符串不等于<span class=\"built_in\">XML</span>文件内容</div><div class=\"line\">assertXmlStringNotEqualsXmlString 断言<span class=\"built_in\">XML</span>字符串不相等</div></pre></td></tr></table></figure>\n\n<h2 id=\"laravel断言\">laravel断言</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">assertResponseOk  Assert回应为OK</div><div class=\"line\">assertResponseStatus(<span class=\"number\">403</span>) Assert 回应状态码</div><div class=\"line\"></div><div class=\"line\">Assert 回应为重定向</div><div class=\"line\"><span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertRedirectedTo</span>(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertRedirectedToRoute</span>(<span class=\"string\">'route.name'</span>);</div><div class=\"line\"><span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertRedirectedToAction</span>(<span class=\"string\">'Controller@method'</span>);</div><div class=\"line\"></div><div class=\"line\">Assert 回应带数据的视图</div><div class=\"line\"><span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertViewHas</span>(<span class=\"string\">'name'</span>);</div><div class=\"line\"><span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertViewHas</span>(<span class=\"string\">'age'</span>, <span class=\"variable\">$value</span>);</div><div class=\"line\"></div><div class=\"line\">Assert 回应带数据的 Session</div><div class=\"line\"><span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertSessionHas</span>(<span class=\"string\">'name'</span>);</div><div class=\"line\"><span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertSessionHas</span>(<span class=\"string\">'age'</span>, <span class=\"variable\">$value</span>);</div></pre></td></tr></table></figure>\n\n<p><a name=\"mock\"></a></p>\n<h2 id=\"测试替身_Mock\">测试替身 Mock</h2>\n<p>单元测试过程中经常会遇到被测试函数A依赖另一个函数B，但是已经有针对B的测试，没有必要在测试A的时候重复测试B。<br>PHPUnit提供了Mock API来帮我们解决这个问题。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testBit</span><span class=\"params\">()</span></span>{</div><div class=\"line\">  <span class=\"variable\">$oClientMock</span> = <span class=\"variable\">$this</span><span class=\"variable\">-&gt;getMock</span>(<span class=\"string\">'SomeClient'</span>); <span class=\"comment\">// 创建mock对象</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">$oClientMock</span><span class=\"variable\">-&gt;expects</span>(<span class=\"variable\">$this</span><span class=\"variable\">-&gt;once</span>()) <span class=\"comment\">// 设定次数</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">-&gt;method</span>(<span class=\"string\">'ExecuteCommand'</span>) <span class=\"comment\">// 设定方法</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">-&gt;with</span>(CPU_BIT_CMD) <span class=\"comment\">// 设定方法入参</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">-&gt;will</span>(<span class=\"variable\">$this</span><span class=\"variable\">-&gt;returnValue</span>(<span class=\"string\">'some'</span>)); <span class=\"comment\">// 设定方法返回值</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">$oHardware</span> = <span class=\"keyword\">new</span> MHardware(<span class=\"variable\">$oClientMock</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"variable\">$this</span><span class=\"variable\">-&gt;assertEquals</span>(<span class=\"string\">'32'</span>, <span class=\"variable\">$oHardware</span><span class=\"variable\">-&gt;CpuBit</span>()); <span class=\"comment\">// 调用方法并断言</span></div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h3 id=\"使用mock一般有下面几步：\">使用mock一般有下面几步：</h3>\n<blockquote>\n<p>getMock 创建mock对象（必须有）<br>method 设置期望调用的方法（必须有）<br>expects 设置方法调用的次数（必须有）<br>with 设置调用方法时的入参（可选）<br>will 设置调用方法后的返回值（可选）  </p>\n</blockquote>\n<h3 id=\"getMock函数签名详解\">getMock函数签名详解</h3>\n<p>getMock有7个参数，一般只需要使用第一个参数指定被mock的类即可，但是如果需要更灵活的配置mock，有必要了解其他参数：</p>\n<p>String – Required – 需要mock的类的名称<br>Array – Optional – 需要mock的函数名称数组，默认情况下，会mock所有函数（即给所有函数一个空的实现），但是如果设置了需要mock的函数，那么其他函数将不会被mock，按照原来的方式执行。<br>Array – Optional – 需要传入给构造函数的参数，getMock方法帮你调用了构造函数，所以这里通过一个数组，给你设置构造函数参数的机会<br>String – Optional – 给这个mock类起一个名称，这样可以使用这个新名称创建许多同样的mock类实例。<br>Boolean – Optional – true将调用原始对象的构造函数，false将不掉用，默认为true<br>Boolean – Optional – true将可以调用原始类的clone函数，false则无法调用。<br>Boolean – Optional – false将禁止__autoload函数被调用，当mock对象被创建时。</p>\n<h3 id=\"匹配器（Matchers）\">匹配器（Matchers）</h3>\n<p>匹配器相当于调用mock方法的量词，作为expects函数的参数传给mock对象，用于设定期望的调用次数，主要有下面几个：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">once</span>() 期望方法只调用一次，否则测试失败</div><div class=\"line\"><span class=\"function\">never</span>() 期望方法从不被调用，否则测试失败</div><div class=\"line\"><span class=\"function\">any</span>() 期望调用任意次，测试永远不会因此失败。</div><div class=\"line\"><span class=\"function\">at</span>(<span class=\"variable\">$index</span>) 期望方法被第<span class=\"variable\">$indexd</span>调用的行为，<span class=\"variable\">$index</span>从0开始，一般会配合with或will使用。值得注意的是<span class=\"variable\">$index</span>是针对特定mock对象而言的，而不是针对特定mock对象的特定方法。也就是说，mock对象<span class=\"tag\">A</span>任意一个方法被调用一次，<span class=\"variable\">$index</span>会增加1。</div><div class=\"line\"><span class=\"function\">exactly</span>(<span class=\"variable\">$times</span>) 期望执行准确的次数，否则测试失败</div><div class=\"line\"><span class=\"function\">atLeastOnce</span>() 期望执行至少一次，否则测试失败</div></pre></td></tr></table></figure>\n\n<h3 id=\"约束（Constraints）\">约束（Constraints）</h3>\n<p>约束和with一起使用，用于设定mock函数的输入，约束有很多，主要分为一下几大类</p>\n<p>[数组]</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">arrayHasKey</span>(mixed <span class=\"variable\">$key</span>) 断言入参数组是否有指定的键</div><div class=\"line\"><span class=\"function\">contains</span>(mixed <span class=\"variable\">$value</span>) 断言入参数组是否有指定的值</div></pre></td></tr></table></figure>\n\n<p>[逻辑]</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">logicalAnd</span>(<span class=\"variable\">$constraint</span>,<span class=\"variable\">$constraint</span>) 断言两个参数逻辑和</div><div class=\"line\"><span class=\"function\">logicalNot</span>(<span class=\"variable\">$constraint</span>) 断言参数逻辑否</div><div class=\"line\"><span class=\"function\">logicalOr</span>(<span class=\"variable\">$constraint</span>,<span class=\"variable\">$constraint</span>) 断言两个参数逻辑或</div><div class=\"line\"><span class=\"function\">logicalXor</span>(<span class=\"variable\">$constraint</span>,<span class=\"variable\">$constraint</span>) 断言两个逻辑异或</div></pre></td></tr></table></figure>\n\n<p>[字符串]</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">matchesRegularExpression</span>(<span class=\"variable\">$pattern</span>) 断言入参是否匹配正则表达式</div><div class=\"line\"><span class=\"function\">stringContains</span>(<span class=\"variable\">$string</span>, <span class=\"variable\">$case</span>) 断言入参是否包含表达式</div><div class=\"line\"><span class=\"function\">stringEndsWith</span>( <span class=\"variable\">$suffix</span>) 断言入参是否有此后缀</div><div class=\"line\"><span class=\"function\">stringStartsWith</span>(string <span class=\"variable\">$prefix</span>) 断言入参是否有次前缀</div></pre></td></tr></table></figure>\n\n<p>[比较]</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">identicalTo(<span class=\"variable\">$value</span>) 断言入参===当前值</div><div class=\"line\">equalTo(<span class=\"variable\">$value</span>, <span class=\"variable\">$delta</span> = <span class=\"number\">0</span>, <span class=\"variable\">$maxDepth</span> = <span class=\"number\">10</span>) 断言入菜是否==当前值</div><div class=\"line\">lessThan(<span class=\"variable\">$value</span>) 断言入参&lt;当前值</div><div class=\"line\">lessThanOrEqual(mixed <span class=\"variable\">$value</span>) 断言入参&lt;=当前值</div><div class=\"line\">greaterThan(mixed <span class=\"variable\">$value</span>) 断言入参&gt;当前值</div><div class=\"line\">greaterThanOrEqual(mixed <span class=\"variable\">$value</span>) 断言入参&gt;=当前值</div></pre></td></tr></table></figure>\n\n<p>[类和对象]</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">attribute(<span class=\"variable\">$constraint</span>, <span class=\"variable\">$attributeName</span>) 将约束赋给指定属性或对象</div><div class=\"line\">attributeEqualTo(<span class=\"variable\">$attributeName</span>, <span class=\"variable\">$value</span>, <span class=\"variable\">$delta</span> = <span class=\"number\">0</span>, <span class=\"variable\">$maxDepth</span> = <span class=\"number\">10</span>) 断言value是否与当前对象的某个属性相等</div><div class=\"line\">classHasAttribute(<span class=\"variable\">$attributeName</span>) 断言当前类是否具有摸个属性</div><div class=\"line\">classHasStaticAttribute(<span class=\"variable\">$attributeName</span>) 断言当前类是否具有某个静态属性</div><div class=\"line\">hasAttribute(<span class=\"variable\">$attributeName</span>) 断言当前对象是否有指定的属性</div></pre></td></tr></table></figure>\n\n<p>[基本类型]</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">isFalse</span>() 断言当前值为FALSE</div><div class=\"line\"><span class=\"function\">isTrue</span>() 断言当前对象是否为TRUE</div><div class=\"line\"><span class=\"function\">isInstanceOf</span>(string <span class=\"variable\">$className</span>) 断言当对象是某个类的实例</div><div class=\"line\"><span class=\"function\">isNull</span>() 断言当前对象是否为NULL</div><div class=\"line\"><span class=\"function\">isType</span>(<span class=\"variable\">$type</span>) 断言当前对象是某个具体的类型</div></pre></td></tr></table></figure>\n\n<p>[其他]</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">anything</span><span class=\"params\">()</span> 接受任何入参</span></div><div class=\"line\"><span class=\"title\">fileExists</span><span class=\"params\">()</span> 断言当前入参代表的文件是否存在</div></pre></td></tr></table></figure>\n\n<h3 id=\"返回\">返回</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">设定返回值，与will一起使用，用于设定mock函数的返回值，主要方法方法如下：</div><div class=\"line\"><span class=\"function\">returnValue</span>(<span class=\"variable\">$value</span>) 返回字面意思</div><div class=\"line\"><span class=\"function\">throwException</span>(<span class=\"variable\">$exception</span>) 此方法在调用时抛出指定异常</div><div class=\"line\"><span class=\"function\">returnArgument</span>(<span class=\"variable\">$index</span>) 返回第<span class=\"variable\">$index</span>个参数，从0开始</div><div class=\"line\"><span class=\"function\">returnCallback</span>(<span class=\"variable\">$fun</span>) 返回值通过回调函数生成,函数签名与被mock的函数相同</div><div class=\"line\"><span class=\"function\">onConsecutiveCalls</span>(arg0,arg1,…) 设定返回值列表，这样可以控制被返回值的顺序，更灵活的控制返回值，最好与匹配器any或atLeastOnce结合使用。</div></pre></td></tr></table></figure>\n\n<p><a name=\"phpunitCommondLine\"></a></p>\n<h3 id=\"命令行测试\">命令行测试</h3>\n<p>一些简单的常用命令</p>\n<p>测试指定的目录下*Test.php文件中的测试用例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phpunit tests</div></pre></td></tr></table></figure>\n\n<p>如果你希望更细粒度的控制执行特定用例，可以使用“—filter”参数<br>测试指定类</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">phpunit --filter ClassNameTest</div><div class=\"line\">PHPUnit <span class=\"number\">4.4</span>.<span class=\"number\">0</span> by Sebastian Bergmann.</div><div class=\"line\"></div><div class=\"line\">Time: <span class=\"number\">2.49</span> seconds, Memory: <span class=\"number\">6.75</span>Mb</div><div class=\"line\">OK (<span class=\"number\">1</span> test, <span class=\"number\">0</span> assertions)</div></pre></td></tr></table></figure>\n\n<p>测试指定类的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phpunit --filter ClassNameTest::testClassMethod</div></pre></td></tr></table></figure>\n\n<p>测试整个项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phpunit</div></pre></td></tr></table></figure>\n\n<p><a name=\"coverage\"></a></p>\n<h3 id=\"代码覆盖率\">代码覆盖率</h3>\n<p>测试并生成代码覆盖率文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-coverage-clover &lt;file&gt;</span>  生成带有代码覆盖率信息的 <span class=\"constant\">XML</span> 格式的日志文件.</span></span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-coverage-crap4j &lt;file&gt;</span>  生成 <span class=\"constant\">Crap4j</span> 格式的代码覆盖率报告.</span></span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-coverage-html &lt;dir&gt;</span>     生成 <span class=\"constant\">HTML</span> 格式的代码覆盖率报告.</span></span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-coverage-php &lt;file&gt;</span>     生成一个序列化后的 <span class=\"constant\">PHP_CodeCoverage</span> 对象，此对象含有代码覆盖率信息.</span></span></div><div class=\"line\">-<span class=\"ruby\">-coverage-text=&lt;file&gt; 生成带有代码覆盖率信息的日志文件或命令行输出</span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-coverage-xml &lt;dir&gt;</span>      生成带有代码覆盖率信息的 <span class=\"constant\">XML</span> 格式的日志文件.</span></span></div></pre></td></tr></table></figure>\n\n<p>测试结果</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-log-junit  &lt;file&gt;</span> 为运行的测试生成 <span class=\"constant\">JUnit</span> <span class=\"constant\">XML</span> 格式的日志文件。</span></span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-log-tap  &lt;file&gt;</span> 为运行的测试生成(<span class=\"constant\">TAP</span>) 格式的日志文件。</span></span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-log-json  &lt;file&gt;</span> 生成 <span class=\"constant\">JSON</span> 格式的日志文件。</span></span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-testdox-html &lt;file&gt;</span> 为运行的测试生成<span class=\"constant\">HTML</span>格式的日志文件</span></span></div><div class=\"line\">-<span class=\"ruby\"><span class=\"input\"><span class=\"prompt\">-testdox-text &lt;file&gt;</span> 为运行的测试生成纯文本格式的日志文件</span></span></div><div class=\"line\"></div><div class=\"line\">phpunit --coverage-html coverage-html --testdox-html test-result</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>更多命令行选项请参考PHPUnit手册第3章 命令行测试执行器</p>\n</blockquote>\n<h2 id=\"Mockery\">Mockery</h2>\n<p>Mockery是一个PHP mock 对象框架 </p>\n<blockquote>\n<p><a href=\"https://github.com/padraic/mockery\" target=\"_blank\" rel=\"external\">https://github.com/padraic/mockery</a></p>\n</blockquote>\n<h2 id=\"phpunit_xml配置文件\">phpunit xml配置文件</h2>\n<p><phpunit> 元素的属性用于配置 PHPUnit 的核心功能</phpunit></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml <span class=\"variable\">version=</span><span class=\"string\">\"1.0\"</span> <span class=\"variable\">encoding=</span><span class=\"string\">\"UTF-8\"</span>?&gt;</div><div class=\"line\">&lt;phpunit <span class=\"variable\">backupGlobals=</span><span class=\"string\">\"false\"</span></div><div class=\"line\">          <span class=\"variable\">backupStaticAttributes=</span><span class=\"string\">\"false\"</span></div><div class=\"line\">          <span class=\"variable\">bootstrap=</span><span class=\"string\">\"bootstrap/autoload.php\"</span></div><div class=\"line\">          <span class=\"variable\">colors=</span><span class=\"string\">\"true\"</span></div><div class=\"line\">          <span class=\"variable\">convertErrorsToExceptions=</span><span class=\"string\">\"true\"</span></div><div class=\"line\">          <span class=\"variable\">convertNoticesToExceptions=</span><span class=\"string\">\"true\"</span></div><div class=\"line\">          <span class=\"variable\">convertWarningsToExceptions=</span><span class=\"string\">\"true\"</span></div><div class=\"line\">          <span class=\"variable\">processIsolation=</span><span class=\"string\">\"false\"</span></div><div class=\"line\">          <span class=\"variable\">stopOnFailure=</span><span class=\"string\">\"false\"</span></div><div class=\"line\">          <span class=\"variable\">syntaxCheck=</span><span class=\"string\">\"false\"</span></div><div class=\"line\">          &gt;</div><div class=\"line\">&lt;/phpunit&gt;</div></pre></td></tr></table></figure>\n\n<p>测试套件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">testsuites</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">testsuite</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"Application Test Suite\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">directory</span>&gt;</span>./tests/<span class=\"tag\">&lt;/<span class=\"title\">directory</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">testsuite</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">testsuites</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>包含或排除文件</p>\n<p><filter> 元素及其子元素用于配置代码覆盖率报告的黑名单与白名单</filter></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">filter</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">blacklist</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">directory</span> <span class=\"attribute\">suffix</span>=<span class=\"value\">\".php\"</span>&gt;</span>./vendor<span class=\"tag\">&lt;/<span class=\"title\">directory</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">directory</span> <span class=\"attribute\">suffix</span>=<span class=\"value\">\".php\"</span>&gt;</span>./bootstrap<span class=\"tag\">&lt;/<span class=\"title\">directory</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">blacklist</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">whitelist</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">directory</span> <span class=\"attribute\">suffix</span>=<span class=\"value\">\".php\"</span>&gt;</span>app<span class=\"tag\">&lt;/<span class=\"title\">directory</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">whitelist</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">filter</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>日志记录</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">logging</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--代码覆盖率--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">log</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"coverage-html\"</span> <span class=\"attribute\">target</span>=<span class=\"value\">\"./coverage-html\"</span> <span class=\"attribute\">charset</span>=<span class=\"value\">\"UTF-8\"</span></span></div><div class=\"line\"><span class=\"attribute\">highlight</span>=<span class=\"value\">\"false\"</span> <span class=\"attribute\">lowUpperBound</span>=<span class=\"value\">\"35\"</span> <span class=\"attribute\">highLowerBound</span>=<span class=\"value\">\"70\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">&lt;!--测试结果--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">log</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"testdox-html\"</span> <span class=\"attribute\">target</span>=<span class=\"value\">\"./coverage-html/test-result.html\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">logging</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"延伸阅读\">延伸阅读</h2>\n<p><a name=\"phpCodeSniffer\"></a></p>\n<h3 id=\"PHP代码探测器检查编码标准\">PHP代码探测器检查编码标准</h3>\n<p>PHP_CodeSniffer是PEAR中的一个用PHP5写的用来检查嗅探PHP代码是否有违反一组预先设置好的编码标准的一个包，它是确保你的代码简洁一致的必不可少的开发工具，甚至还可以帮助程序员减少一些语义错误。</p>\n<blockquote>\n<p><a href=\"https://github.com/squizlabs/PHP_CodeSniffer\" target=\"_blank\" rel=\"external\">https://github.com/squizlabs/PHP_CodeSniffer</a></p>\n</blockquote>\n<p>PHP_CodeSniffer自带有多个编码标准，也可自定义标准<br>查看PHP_CodeSniffer中已经安装的编码标准</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./vendor/bin/phpcs -i</div><div class=\"line\"><span class=\"variable\">The</span> installed coding standards are <span class=\"variable\">MySource</span>, <span class=\"variable\">PEAR</span>, <span class=\"variable\">PHPCS</span>, <span class=\"variable\">PSR1</span>, <span class=\"variable\">PSR2</span>, <span class=\"variable\">Squiz</span> <span class=\"keyword\">and</span> <span class=\"variable\">Zend</span></div></pre></td></tr></table></figure>\n\n<p>使用自定义的标准</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.<span class=\"regexp\">/vendor/</span>bin<span class=\"regexp\">/phpcs --standard=LaravelCodeSniffer/</span>Standards<span class=\"regexp\">/Laravel/</span> app<span class=\"regexp\">/controllers/</span></div></pre></td></tr></table></figure>\n\n<p><a name=\"phpDocumentor\"></a></p>\n<h3 id=\"PHPDocumentor\">PHPDocumentor</h3>\n<p>是一个用PHP写的工具，用于生成类似javaDoc样式的API文档。</p>\n<blockquote>\n<p><a href=\"http://www.phpdoc.org/\" target=\"_blank\" rel=\"external\">http://www.phpdoc.org/</a></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./phpDocumentor.phar <span class=\"operator\">-d</span> app/controllers -t PHPDocumentor</div></pre></td></tr></table></figure>\n\n<p><a name=\"php-fig\"></a></p>\n<h3 id=\"PHP-FIG\">PHP-FIG</h3>\n<p>什么是PHP-FIG?<br>框架互操作组(即PHP标准组)发布了一系列推荐风格。其中有部分是关于代码风格的，即PSR-0，PSR-1，PSR-2和PSR-4。这些推荐仅是一些被其它项目所遵循的规则，如Laravel, Symfony, CakePHP, phpBB, AWS SDK, FuelPHP, Lithium等，你可以把这些规则用在自己的项目中，或者继续使用你自己的风格。</p>\n<p><code>PSR-0 (Autoloading Standard)</code> 自动加载规范<br><code>PSR-1 (Basic Coding Standard)</code> 基本代码规范<br><code>PSR-2 (Coding Style Guide)</code> 代码风格规范<br><code>PSR-3 (Logger Interface)</code> 日志接口  </p>\n<blockquote>\n<p><a href=\"http://www.php-fig.org\" target=\"_blank\" rel=\"external\">PHP-FIG</a></p>\n</blockquote>\n<p><a name=\"phptherightway\"></a></p>\n<h3 id=\"PHP_the_right_way_(PHP之道)\">PHP the right way (PHP之道)</h3>\n<blockquote>\n<p><a href=\"http://www.phptherightway.com/\" target=\"_blank\" rel=\"external\">http://www.phptherightway.com/</a></p>\n</blockquote>\n<p>PHP之道网站的目标就是搜集PHP最佳实践、编码规范和网络上的权威学习指南，给PHP学习者提供一个易于阅读，快速查找的入口。</p>\n<h3 id=\"关于本文\">关于本文</h3>\n<p>采用Markdown文件格式编写,Markdown是一个轻量级标记语言<br>Markdown 的理念是让文档更容易读、写和随意改。Markdown 是一种书写的格式，HTML 是一种发布的格式<br>工具：</p>\n<blockquote>\n<ul>\n<li>Sublime Text 2</li>\n<li>MarkdownPad</li>\n</ul>\n</blockquote>\n<p>语法参考</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/collection/BDu5F8\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/collection/BDu5F8</a></p>\n</blockquote>\n","source":"_posts/php-TDD开发.md","raw":"title: PHP测试驱动开发 \ndate: 2014-12-20  15:45:11\ntags: 测试驱动开发 TDD php \n---\n\n\n\n#php 测试驱动开发 TDD\n# PHP开发分享\n- [测试驱动开发](#tdd)  \n    - [phpunit](#phpunit)  \n        - [断言测试](#assert)  \n        - [测试替身](#mock)  \n        - [命令行测试](#phpunitCommondLine)  \n        - [代码覆盖率报告](#coverage)  \n- [PHP CodeSniffer  PHP代码探测器检查编码标准](#phpCodeSniffer)\n- [PHPDocumentor api文档生成工具](#phpDocumentor)  \n- [PHP-FIG 框架互操作组 PHP编码规范](#php-fig)  \n- [PHP the right way PHP学习指南](#phptherightway)  \n\n<a name=\"tdd\"></a>\n## 测试驱动开发(TDD)\n\n测试驱动开发（Test-driven development）是极限编程中倡导的程序开发方法，以其倡导先写测试程序，然后编码实现其功能得名。测试驱动开发始于20世纪90年代。测试驱动开发的目的是取得快速反馈并使用“illustrate the main line”方法来构建程序。\n\n###TDD的目标\n\n`Clean Code That Works`\n\n这句话的含义是，事实上我们只做两件事情：让代码奏效（Work）和让代码洁净（Clean），前者是把事情做对，后者是把事情做好。想想看，其实 我们平时所做的所有工作，除去无用的工作和错误的工作以外，真正正确的工作，并且是真正有意义的工作，其实也就只有两大类：增加功能和提升设计，而TDD 正是在这个原则上产生的。如果您的工作并非我们想象的这样，（这意味着您还存在第三类正确有意义的工作，或者您所要做的根本和我们在说的是两回事），那么 这告诉我们您并不需要TDD，或者不适用TDD。而如果我们偶然猜对（这对于我来说是偶然，而对于Kent Beck和Martin Fowler这样的大师来说则是辛勤工作的成果），那么恭喜您，TDD有可能成为您显著提升工作效率的一件法宝。请不要将信将疑，若即若离，因为任何一项 新的技术——只要是从根本上改变人的行为方式的技术——就必然使得相信它的人越来越相信，不信的人越来越不信。这就好比学游泳，唯一能学会游泳的途径就是 亲自下去游，除此之外别无他法。这也好比成功学，即使把卡耐基或希尔博士的书倒背如流也不能拥有积极的心态，可当你以积极的心态去成就了一番事业之后，你 就再也离不开它了。相信我，TDD也是这样！想试用TDD的人们，请遵循下面的步骤：\n\n\n###TDD的优点\n\n『充满吸引力的优点』\n\n1.完工时完工。表明我可以很清楚的看到自己的这段工作已经结束了，而传统的方式很难知道什么时候编码工作结束了。  \n2.全面正确的认识代码和利用代码，而传统的方式没有这个机会。  \n3.为利用你成果的人提供Sample，无论它是要利用你的源代码，还是直接重用你提供的组件。  \n4.开发小组间降低了交流成本，提高了相互信赖程度。  \n5.避免了过渡设计。  \n6.系统可以与详尽的测试集一起发布，从而对程序的将来版本的修改和扩展提供方便。  \n7.TDD给了我们自信，让我们今天的问题今天解决，明天的问题明天解决，今天不能解决明天的问题   ，因为明天的问题还没有出现(没有TestCase)，除非有TestCase否则我决不写任何代码；明天也不必担心今天的问题，只要我亮了绿灯。  \n\n『不显而易见的优点』\n\n8.逃避了设计角色。对于一个敏捷的开发小组，每个人都在做设计。  \n9.大部分时间代码处在高质量状态，100％的时间里成果是可见的。  \n10.由于可以保证编写测试和编写代码的是相同的程序员，降低了理解代码所花费的成本。  \n11.为减少文档和代码之间存在的细微的差别和由这种差别所引入的Bug作出杰出贡献。  \n12.在预先设计和紧急设计之间建立一种平衡点，为你区分哪些设计该事先做、哪些设计该迭代时做提供了一个可靠的判断依据。\n\n『有争议的优点』\n\n13.事实上提高了开发效率。每一个正在使用TDD并相信TDD的人都会相信这一点，但观望者则不同，不相信TDD的人甚至坚决反对这一点，这很正常，世界总是这样。\n14.发现比传统测试方式更多的Bug。  \n15.使IDE的调试功能失去意义，或者应该说，避免了令人头痛的调试和节约了调试的时间。  \n16.总是处在要么编程要么重构的状态下，不会使人抓狂。（两顶帽子）  \n17.单元测试非常有趣。\n\nTDD的步骤\n> 编写TestCase  --> 实现TestCase  --> 重构\n> （不可运行） &nbsp; &nbsp; &nbsp; &nbsp;（可运行）   &nbsp;    &nbsp; &nbsp; （重构） \n\n<table><tr><td>(1) 快速新增一个测试用例  </td><td>新的TestCase</td></tr><tr><td>(2) 编译所有代码，刚刚写的那个测试很可能编译不通过</td><td>原始的TODO List</td></tr><tr><td>(3) 做尽可能少的改动，让编译通过</td><td>Interface</td></tr><tr><td>(4) 运行所有的测试，发现最新的测试不能编译通过</td><td>－(Red Bar) </td></tr><tr><td>(5) 做尽可能少的改动，让测试通过 </td><td>Implementation</td></tr><tr><td>(6) 运行所有的测试，保证每个都能通过 </td><td>－(Green Bar) </td></tr><tr><td>(7) 重构代码，以消除重复设计</td><td>Clean Code That Works</td></tr></table>\n\n书籍：\n>  测试驱动开发 http://book.douban.com/subject/25735501/\n\n练习：\n>  https://github.com/daylerees/test-driven-development-example\n\n<a name=\"phpunit\"></a>\n##phpunit\nPHPUnit是一个轻量级的PHP测试框架， 当前最新版本 PHPUnit 4.4.0\n>  https://phpunit.de/\n\n###安装 （linux）\n```bash\n$ wget https://phar.phpunit.de/phpunit.phar  \n$ chmod  +x phpunit.phar  \n$ sudo mv phpunit.phar /usr/local/bin/phpunit\n```\n>  其他平台安装方式请参考PHPUnit手册第1章\n\nphpunit默认执行指定目录下*Test.php文件中的测试用例，并且是迭代的遍历所有子目录。phpunit命令提供了一些可选参数，可以使得批量处理Test Case变得容易。\n\n\n<a name=\"assert\"></a>\n##phpunit断言\n```\n布尔类型\nassertTrue   断言为真\nassertFalse  断言为假\n\nNULL类型\nassertNull    断言为NULL\nassertNotNull  断言非NULL\n\n数字类型\nassertEquals             断言等于\nassertNotEquals          断言不等于\nassertGreaterThan        断言大于\nassertGreaterThanOrEqual 断言大于等于\nassertLessThan           断言小于\nassertLessThanOrEqual    断言小于等于\n\n字符类型\nassertEquals          断言等于\nassertNotEquals       断言不等于\nassertContains        断言包含\nassertNotContains     断言不包含\nassertContainsOnly    断言只包含\nassertNotContainsOnly 断言不只包含\n\n数组类型\nassertEquals          断言等于\nassertNotEquals       断言不等于\nassertArrayHasKey     断言有键\nassertArrayNotHasKey  断言没有键\nassertContains        断言包含\nassertNotContains     断言不包含\nassertContainsOnly    断言只包含\nassertNotContainsOnly 断言不只包含\n\n对象类型\nassertAttributeContains           断言属性包含\nassertAttributeContainsOnly       断言属性只包含\nassertAttributeEquals             断言属性等于\nassertAttributeGreaterThan        断言属性大于\nassertAttributeGreaterThanOrEqual 断言属性大于等于\nassertAttributeLessThan           断言属性小于\nassertAttributeLessThanOrEqual    断言属性小于等于\nassertAttributeNotContains        断言不包含\nassertAttributeNotContainsOnly    断言属性不只包含\nassertAttributeNotEquals          断言属性不等于\nassertAttributeNotSame            断言属性不相同\nassertAttributeSame               断言属性相同\nassertSame                        断言类型和值都相同\nassertNotSame                     断言类型或值不相同\nassertObjectHasAttribute          断言对象有某属性\nassertObjectNotHasAttribute       断言对象没有某属性\n\nclass类型\nclass类型包含对象类型的所有断言，还有\nassertClassHasAttribute          断言类有某属性\nassertClassHasStaticAttribute    断言类有某静态属性\nassertClassNotHasAttribute       断言类没有某属性\nassertClassNotHasStaticAttribute 断言类没有某静态属性\n\n文件相关\nassertFileEquals     断言文件内容等于\nassertFileExists     断言文件存在\nassertFileNotEquals  断言文件内容不等于\nassertFileNotExists  断言文件不存在\n\nXML相关\nassertXmlFileEqualsXmlFile        断言XML文件内容相等\nassertXmlFileNotEqualsXmlFile     断言XML文件内容不相等\nassertXmlStringEqualsXmlFile      断言XML字符串等于XML文件内容\nassertXmlStringEqualsXmlString    断言XML字符串相等\nassertXmlStringNotEqualsXmlFile   断言XML字符串不等于XML文件内容\nassertXmlStringNotEqualsXmlString 断言XML字符串不相等\n\n```\n\n##laravel断言\n\n```\nassertResponseOk  Assert回应为OK\nassertResponseStatus(403) Assert 回应状态码\n\nAssert 回应为重定向\n$this->assertRedirectedTo('foo');\n$this->assertRedirectedToRoute('route.name');\n$this->assertRedirectedToAction('Controller@method');\n\nAssert 回应带数据的视图\n$this->assertViewHas('name');\n$this->assertViewHas('age', $value);\n\nAssert 回应带数据的 Session\n$this->assertSessionHas('name');\n$this->assertSessionHas('age', $value);\n\n\n```\n\n<a name=\"mock\"></a>\n##测试替身 Mock\n单元测试过程中经常会遇到被测试函数A依赖另一个函数B，但是已经有针对B的测试，没有必要在测试A的时候重复测试B。\nPHPUnit提供了Mock API来帮我们解决这个问题。\n```\npublic function testBit(){\n  $oClientMock = $this->getMock('SomeClient'); // 创建mock对象\n\n  $oClientMock->expects($this->once()) // 设定次数\n\n  ->method('ExecuteCommand') // 设定方法\n\n  ->with(CPU_BIT_CMD) // 设定方法入参\n\n  ->will($this->returnValue('some')); // 设定方法返回值\n\n  $oHardware = new MHardware($oClientMock);\n\n  $this->assertEquals('32', $oHardware->CpuBit()); // 调用方法并断言\n\n}\n\n```\n###使用mock一般有下面几步：\n\n> getMock 创建mock对象（必须有）  \n> method 设置期望调用的方法（必须有）  \n> expects 设置方法调用的次数（必须有）  \n> with 设置调用方法时的入参（可选）  \n> will 设置调用方法后的返回值（可选）  \n\n###getMock函数签名详解\n\ngetMock有7个参数，一般只需要使用第一个参数指定被mock的类即可，但是如果需要更灵活的配置mock，有必要了解其他参数：\n\nString – Required – 需要mock的类的名称\nArray – Optional – 需要mock的函数名称数组，默认情况下，会mock所有函数（即给所有函数一个空的实现），但是如果设置了需要mock的函数，那么其他函数将不会被mock，按照原来的方式执行。\nArray – Optional – 需要传入给构造函数的参数，getMock方法帮你调用了构造函数，所以这里通过一个数组，给你设置构造函数参数的机会\nString – Optional – 给这个mock类起一个名称，这样可以使用这个新名称创建许多同样的mock类实例。\nBoolean – Optional – true将调用原始对象的构造函数，false将不掉用，默认为true\nBoolean – Optional – true将可以调用原始类的clone函数，false则无法调用。\nBoolean – Optional – false将禁止__autoload函数被调用，当mock对象被创建时。\n\n\n###匹配器（Matchers）\n\n匹配器相当于调用mock方法的量词，作为expects函数的参数传给mock对象，用于设定期望的调用次数，主要有下面几个：\n```\nonce() 期望方法只调用一次，否则测试失败\nnever() 期望方法从不被调用，否则测试失败\nany() 期望调用任意次，测试永远不会因此失败。\nat($index) 期望方法被第$indexd调用的行为，$index从0开始，一般会配合with或will使用。值得注意的是$index是针对特定mock对象而言的，而不是针对特定mock对象的特定方法。也就是说，mock对象A任意一个方法被调用一次，$index会增加1。\nexactly($times) 期望执行准确的次数，否则测试失败\natLeastOnce() 期望执行至少一次，否则测试失败\n```\n\n###约束（Constraints）\n\n约束和with一起使用，用于设定mock函数的输入，约束有很多，主要分为一下几大类\n\n[数组]\n```\narrayHasKey(mixed $key) 断言入参数组是否有指定的键\ncontains(mixed $value) 断言入参数组是否有指定的值\n```\n[逻辑]\n```\nlogicalAnd($constraint,$constraint) 断言两个参数逻辑和\nlogicalNot($constraint) 断言参数逻辑否\nlogicalOr($constraint,$constraint) 断言两个参数逻辑或\nlogicalXor($constraint,$constraint) 断言两个逻辑异或\n```\n[字符串]\n```\nmatchesRegularExpression($pattern) 断言入参是否匹配正则表达式\nstringContains($string, $case) 断言入参是否包含表达式\nstringEndsWith( $suffix) 断言入参是否有此后缀\nstringStartsWith(string $prefix) 断言入参是否有次前缀\n```\n[比较]\n```\nidenticalTo($value) 断言入参===当前值\nequalTo($value, $delta = 0, $maxDepth = 10) 断言入菜是否==当前值\nlessThan($value) 断言入参<当前值\nlessThanOrEqual(mixed $value) 断言入参<=当前值\ngreaterThan(mixed $value) 断言入参>当前值\ngreaterThanOrEqual(mixed $value) 断言入参>=当前值\n```\n[类和对象]\n```\nattribute($constraint, $attributeName) 将约束赋给指定属性或对象\nattributeEqualTo($attributeName, $value, $delta = 0, $maxDepth = 10) 断言value是否与当前对象的某个属性相等\nclassHasAttribute($attributeName) 断言当前类是否具有摸个属性\nclassHasStaticAttribute($attributeName) 断言当前类是否具有某个静态属性\nhasAttribute($attributeName) 断言当前对象是否有指定的属性\n```\n[基本类型]\n```\nisFalse() 断言当前值为FALSE\nisTrue() 断言当前对象是否为TRUE\nisInstanceOf(string $className) 断言当对象是某个类的实例\nisNull() 断言当前对象是否为NULL\nisType($type) 断言当前对象是某个具体的类型\n```\n[其他]\n```\nanything() 接受任何入参\nfileExists() 断言当前入参代表的文件是否存在\n```\n\n###返回\n```\n设定返回值，与will一起使用，用于设定mock函数的返回值，主要方法方法如下：\nreturnValue($value) 返回字面意思\nthrowException($exception) 此方法在调用时抛出指定异常\nreturnArgument($index) 返回第$index个参数，从0开始\nreturnCallback($fun) 返回值通过回调函数生成,函数签名与被mock的函数相同\nonConsecutiveCalls(arg0,arg1,…) 设定返回值列表，这样可以控制被返回值的顺序，更灵活的控制返回值，最好与匹配器any或atLeastOnce结合使用。\n```\n\n<a name=\"phpunitCommondLine\"></a>\n###命令行测试\n一些简单的常用命令\n\n测试指定的目录下*Test.php文件中的测试用例\n```bash\nphpunit tests\n```\n如果你希望更细粒度的控制执行特定用例，可以使用“--filter”参数  \n测试指定类\n```bash\n\nphpunit --filter ClassNameTest\nPHPUnit 4.4.0 by Sebastian Bergmann.\n\nTime: 2.49 seconds, Memory: 6.75Mb\nOK (1 test, 0 assertions)\n```\n\n测试指定类的方法\n```bash\nphpunit --filter ClassNameTest::testClassMethod\n```\n\n测试整个项目\n```bash\nphpunit\n```\n\n<a name=\"coverage\"></a>\n###代码覆盖率\n\n测试并生成代码覆盖率文件\n```\n--coverage-clover <file>  生成带有代码覆盖率信息的 XML 格式的日志文件.\n--coverage-crap4j <file>  生成 Crap4j 格式的代码覆盖率报告.\n--coverage-html <dir>     生成 HTML 格式的代码覆盖率报告.\n--coverage-php <file>     生成一个序列化后的 PHP_CodeCoverage 对象，此对象含有代码覆盖率信息.\n--coverage-text=<file> 生成带有代码覆盖率信息的日志文件或命令行输出\n--coverage-xml <dir>      生成带有代码覆盖率信息的 XML 格式的日志文件.\n```\n\n测试结果\n```\n--log-junit  <file> 为运行的测试生成 JUnit XML 格式的日志文件。\n--log-tap  <file> 为运行的测试生成(TAP) 格式的日志文件。\n--log-json  <file> 生成 JSON 格式的日志文件。\n--testdox-html <file> 为运行的测试生成HTML格式的日志文件\n--testdox-text <file> 为运行的测试生成纯文本格式的日志文件\n\nphpunit --coverage-html coverage-html --testdox-html test-result\n```\n\n> 更多命令行选项请参考PHPUnit手册第3章 命令行测试执行器\n\n\n## Mockery\nMockery是一个PHP mock 对象框架 \n> https://github.com/padraic/mockery\n\n\n## phpunit xml配置文件\n\n<phpunit> 元素的属性用于配置 PHPUnit 的核心功能\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n          backupStaticAttributes=\"false\"\n          bootstrap=\"bootstrap/autoload.php\"\n          colors=\"true\"\n          convertErrorsToExceptions=\"true\"\n          convertNoticesToExceptions=\"true\"\n          convertWarningsToExceptions=\"true\"\n          processIsolation=\"false\"\n          stopOnFailure=\"false\"\n          syntaxCheck=\"false\"\n          >\n</phpunit>\n```\n\n测试套件\n```\n  <testsuites>\n    <testsuite name=\"Application Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n```\n\n包含或排除文件\n<filter> 元素及其子元素用于配置代码覆盖率报告的黑名单与白名单\n```\n  <filter>\n    <blacklist>\n      <directory suffix=\".php\">./vendor</directory>\n      <directory suffix=\".php\">./bootstrap</directory>\n    </blacklist>\n    <whitelist>\n      <directory suffix=\".php\">app</directory>\n    </whitelist>\n  </filter>\n```\n\n日志记录\n```\n  <logging>\n    <!--代码覆盖率-->\n    <log type=\"coverage-html\" target=\"./coverage-html\" charset=\"UTF-8\"\n  highlight=\"false\" lowUpperBound=\"35\" highLowerBound=\"70\"/>\n\n    <!--测试结果-->\n    <log type=\"testdox-html\" target=\"./coverage-html/test-result.html\"/>\n  </logging>\n```\n\n\n##延伸阅读\n\n<a name=\"phpCodeSniffer\"></a>\n### PHP代码探测器检查编码标准\nPHP_CodeSniffer是PEAR中的一个用PHP5写的用来检查嗅探PHP代码是否有违反一组预先设置好的编码标准的一个包，它是确保你的代码简洁一致的必不可少的开发工具，甚至还可以帮助程序员减少一些语义错误。\n> https://github.com/squizlabs/PHP_CodeSniffer\n\nPHP_CodeSniffer自带有多个编码标准，也可自定义标准\n查看PHP_CodeSniffer中已经安装的编码标准\n```\n./vendor/bin/phpcs -i\nThe installed coding standards are MySource, PEAR, PHPCS, PSR1, PSR2, Squiz and Zend\n```\n\n使用自定义的标准\n```\n./vendor/bin/phpcs --standard=LaravelCodeSniffer/Standards/Laravel/ app/controllers/\n```\n\n<a name=\"phpDocumentor\"></a>\n### PHPDocumentor\n是一个用PHP写的工具，用于生成类似javaDoc样式的API文档。\n> http://www.phpdoc.org/\n```\n./phpDocumentor.phar -d app/controllers -t PHPDocumentor\n```\n\n<a name=\"php-fig\"></a>\n### PHP-FIG\n什么是PHP-FIG?\n框架互操作组(即PHP标准组)发布了一系列推荐风格。其中有部分是关于代码风格的，即PSR-0，PSR-1，PSR-2和PSR-4。这些推荐仅是一些被其它项目所遵循的规则，如Laravel, Symfony, CakePHP, phpBB, AWS SDK, FuelPHP, Lithium等，你可以把这些规则用在自己的项目中，或者继续使用你自己的风格。\n\n`PSR-0 (Autoloading Standard)` 自动加载规范  \n`PSR-1 (Basic Coding Standard)` 基本代码规范  \n`PSR-2 (Coding Style Guide)` 代码风格规范  \n`PSR-3 (Logger Interface)` 日志接口  \n> [PHP-FIG](http://www.php-fig.org)\n\n\n<a name=\"phptherightway\"></a>\n### PHP the right way (PHP之道)\n> http://www.phptherightway.com/\n\nPHP之道网站的目标就是搜集PHP最佳实践、编码规范和网络上的权威学习指南，给PHP学习者提供一个易于阅读，快速查找的入口。\n\n\n### 关于本文\n采用Markdown文件格式编写,Markdown是一个轻量级标记语言  \nMarkdown 的理念是让文档更容易读、写和随意改。Markdown 是一种书写的格式，HTML 是一种发布的格式\n工具：\n> * Sublime Text 2\n> * MarkdownPad\n\n语法参考\n> http://www.jianshu.com/collection/BDu5F8\n\n\n","slug":"php-TDD开发","updated":1421135415000,"excerpt":"","_id":"krw4ido6mdfw9wcl","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"利用satis配置私有包","date":1421048425000,"tags":["he2es5qrp4noms9u"],"content":"<p>Satis 是一个静态的 <code>composer</code> 代码库生成器, 可以用来处理私有资源包。  </p>\n<h2 id=\"install\">install</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer.phar <span class=\"operator\"><span class=\"keyword\">create</span>-project composer/satis <span class=\"comment\">--stability=dev</span></span></div></pre></td></tr></table></figure>\n\n<h2 id=\"配置\">配置</h2>\n<p>新建配置文件 <code>satis.json</code>，设置公共库和私有库</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    \"<span class=\"attribute\">name</span>\": <span class=\"value\"><span class=\"string\">\"My Repository\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">homepage</span>\": <span class=\"value\"><span class=\"string\">\"http://satis.yoursite.org/\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">repositories</span>\": <span class=\"value\">[</span></div><div class=\"line\">        {</div><div class=\"line\">            \"<span class=\"attribute\">type</span>\": <span class=\"value\"><span class=\"string\">\"vcs\"</span></span>,</div><div class=\"line\">            \"<span class=\"attribute\">url</span>\": <span class=\"value\"><span class=\"string\">\"ssh://root@yoursite/www/gitdata/test-satis.git\"</span></span></div><div class=\"line\">        },</div><div class=\"line\">        { \"<span class=\"attribute\">type</span>\": <span class=\"value\"><span class=\"string\">\"vcs\"</span></span>, \"<span class=\"attribute\">url</span>\": <span class=\"value\"><span class=\"string\">\"https://github.com/laravel/laravel.git\"</span></span>},</div><div class=\"line\">        { \"<span class=\"attribute\">type</span>\": <span class=\"value\"><span class=\"string\">\"vcs\"</span></span>, \"<span class=\"attribute\">url</span>\": <span class=\"value\"><span class=\"string\">\"https://github.com/padraic/mockery.git\"</span></span>},</div><div class=\"line\">    ],</div><div class=\"line\">    \"<span class=\"attribute\">require-all</span>\": <span class=\"value\"><span class=\"literal\">true</span></span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>完成配置通过以下命令生产项目 <code>php bin/satis build &lt;configuration file&gt; &lt;build dir&gt;</code>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php bin<span class=\"regexp\">/satis build satis.json web/</span></div></pre></td></tr></table></figure>\n\n<p>设置一个虚拟目录指向 web/ 目录, 假设绑定的域名是<a href=\"http://satis.yoursite.org。访问这个域名可以看到已经生成的包列表\" target=\"_blank\" rel=\"external\">http://satis.yoursite.org。访问这个域名可以看到已经生成的包列表</a></p>\n<blockquote>\n<p>注：每次更新包文件，都需要重新运行命令更新包列表</p>\n</blockquote>\n<p>资源包介绍</p>\n<blockquote>\n<p><a href=\"https://getcomposer.org/doc/05-repositories.md\" target=\"_blank\" rel=\"external\">https://getcomposer.org/doc/05-repositories.md</a></p>\n</blockquote>\n<h2 id=\"使用\">使用</h2>\n<p>新建<code>composer.json</code>, 内容如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">    \"<span class=\"attribute\">name</span>\": <span class=\"value\"><span class=\"string\">\"project/test-satis\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">type</span>\": <span class=\"value\"><span class=\"string\">\"project\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">require</span>\": <span class=\"value\">{</span></div><div class=\"line\">        \"<span class=\"attribute\">taoanton/tinyframework</span>\": <span class=\"value\"><span class=\"string\">\"0.2.0\"</span></span>,</div><div class=\"line\">        \"<span class=\"attribute\">mockery/mockery</span>\": <span class=\"value\"><span class=\"string\">\"0.7.*\"</span></span>,</div><div class=\"line\">        \"<span class=\"attribute\">maxrocky/test-satis</span>\": <span class=\"value\"><span class=\"string\">\"v0.2.2\"</span></span></div><div class=\"line\">    },</div><div class=\"line\">    \"<span class=\"attribute\">minimum-stability</span>\": <span class=\"value\"><span class=\"string\">\"dev\"</span></span>,</div><div class=\"line\">    \"<span class=\"attribute\">repositories</span>\": <span class=\"value\">[</span></div><div class=\"line\">        {</div><div class=\"line\">            \"<span class=\"attribute\">type</span>\": <span class=\"value\"><span class=\"string\">\"composer\"</span></span>,</div><div class=\"line\">            \"<span class=\"attribute\">url</span>\": <span class=\"value\"><span class=\"string\">\"http://satis.yoursite.org/\"</span></span></div><div class=\"line\">        },</div><div class=\"line\">        {\"<span class=\"attribute\">packagist</span>\": <span class=\"value\"><span class=\"literal\">false</span></span>}</div><div class=\"line\">    ]</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>运行<code>composer install</code> 安装依赖包</p>\n<p>更多详细内容</p>\n<blockquote>\n<ul>\n<li><a href=\"https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md\" target=\"_blank\" rel=\"external\">https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md</a></li>\n</ul>\n</blockquote>\n","source":"_posts/satis-config.md","raw":"title: 利用satis配置私有包\ndate: 2015-1-12 15:40:25\ntags: composer satis\n---\n\n\n\nSatis 是一个静态的 `composer` 代码库生成器, 可以用来处理私有资源包。  \n\n##install\n```\ncomposer.phar create-project composer/satis --stability=dev\n```\n\n## 配置\n新建配置文件 `satis.json`，设置公共库和私有库\n```\n{\n    \"name\": \"My Repository\",\n    \"homepage\": \"http://satis.yoursite.org/\",\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"ssh://root@yoursite/www/gitdata/test-satis.git\"\n        },\n        { \"type\": \"vcs\", \"url\": \"https://github.com/laravel/laravel.git\"},\n        { \"type\": \"vcs\", \"url\": \"https://github.com/padraic/mockery.git\"},\n    ],\n    \"require-all\": true\n}\n```\n完成配置通过以下命令生产项目 `php bin/satis build <configuration file> <build dir>`.\n\n```\nphp bin/satis build satis.json web/\n```\n设置一个虚拟目录指向 web/ 目录, 假设绑定的域名是http://satis.yoursite.org。访问这个域名可以看到已经生成的包列表\n> 注：每次更新包文件，都需要重新运行命令更新包列表\n\n资源包介绍\n> https://getcomposer.org/doc/05-repositories.md\n\n## 使用\n\n新建`composer.json`, 内容如下：\n```\n{\n    \"name\": \"project/test-satis\",\n    \"type\": \"project\",\n    \"require\": {\n        \"taoanton/tinyframework\": \"0.2.0\",\n        \"mockery/mockery\": \"0.7.*\",\n        \"maxrocky/test-satis\": \"v0.2.2\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"http://satis.yoursite.org/\"\n        },\n        {\"packagist\": false}\n    ]\n}\n\n```\n运行`composer install` 安装依赖包\n\n更多详细内容\n> * https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md\n","slug":"satis-config","updated":1421134695000,"excerpt":"","_id":"6ghwr178401xv4c3","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Lavavel响应","date":1414741511000,"tags":[],"content":"<h1 id=\"响应\">响应</h1>\n<h2 id=\"视图响应\">视图响应</h2>\n<p>模板文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">lang</span>=<span class=\"value\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"doctype\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">lang</span>=<span class=\"value\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">charset</span>=<span class=\"value\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Views!<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Oh yeah! VIEWS!<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>路由定义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::<span class=\"keyword\">get</span>(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> View::make(<span class=\"string\">'simple'</span>);</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<h3 id=\"向视图中传递数据\">向视图中传递数据</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get('/{squirrel}', function($squirrel)</div><div class=\"line\">{</div><div class=\"line\">    $data['squirrel'] = $squirrel;</div><div class=\"line\">    return View::make('simple', $data);</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- app/views/simple.php --&gt;</span></div><div class=\"line\"><span class=\"doctype\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">lang</span>=<span class=\"value\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">charset</span>=<span class=\"value\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Squirrels<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>I wish I were a <span class=\"php\"><span class=\"preprocessor\">&lt;?php</span> <span class=\"keyword\">echo</span> <span class=\"variable\">$squirrel</span>; <span class=\"preprocessor\">?&gt;</span></span> squirrel!<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>重定向</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::<span class=\"keyword\">get</span>(<span class=\"string\">'first'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> Redirect::to(<span class=\"string\">'second'</span>);</div><div class=\"line\">});</div><div class=\"line\">Route::<span class=\"keyword\">get</span>(<span class=\"string\">'second'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Second route.'</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>重定向在用户认证中的应用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::<span class=\"keyword\">get</span>(<span class=\"string\">'books'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (Auth::guest()) <span class=\"keyword\">return</span> Redirect::to(<span class=\"string\">'login'</span>);</div><div class=\"line\">    <span class=\"comment\">// Show books to only logged in users.</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>可定制的服务器响应</p>\n<p>定制响应的“头信息”</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::get(<span class=\"string\">'markdown/response'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"variable\">$response</span> = Response::make(<span class=\"string\">'***some bold text***'</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    <span class=\"variable\">$response</span><span class=\"variable\">-&gt;headers</span><span class=\"variable\">-&gt;set</span>(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/x-markdown'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$response</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>定制响应的“存活时间”</p>\n<p>存活时间 Time-to-live 这个时间以秒为单位，它是数据包可以生存的时间。在传输中，如果超过了这个时间，这个数据报就被认为丢失了，或在一个循环内并且被废弃。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::get(<span class=\"string\">'our/response'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"variable\">$response</span> = Response::make(<span class=\"string\">'Bond, James Bond.'</span>, <span class=\"number\">200</span>);</div><div class=\"line\">    <span class=\"variable\">$response</span><span class=\"variable\">-&gt;setTtl</span>(<span class=\"number\">60</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$response</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>Response 的 API</p>\n<blockquote>\n<p><a href=\"http://api.symfony.com/2.2/Symfony/Component/HttpFoundation/Response.html\" target=\"_blank\" rel=\"external\">TheSymfonyResponseObject</a></p>\n</blockquote>\n<p>Respanse 的快捷方法</p>\n<p>JSON 响应</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">get</span>(<span class=\"string\">'markdown/response'</span>, <span class=\"function\">function</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"variable\">$data</span> = <span class=\"function\">array</span>(<span class=\"string\">'iron'</span>, <span class=\"string\">'man'</span>, <span class=\"string\">'rocks'</span>);</div><div class=\"line\">    return Response<span class=\"value\">::<span class=\"function\">json</span>(<span class=\"variable\">$data</span>);</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>浏览器将输出 <code>[&quot;iron&quot;,&quot;man&quot;,&quot;rocks&quot;]</code></p>\n<p>下载 响应</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">get</span>(<span class=\"string\">'file/download'</span>, <span class=\"function\">function</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"string\">'path_to_my_file.pdf'</span>;</div><div class=\"line\">    return Response<span class=\"value\">::<span class=\"function\">download</span>(<span class=\"variable\">$file</span>);</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>可定制 HTTP 状态码、头信息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">get</span>(<span class=\"string\">'file/download'</span>, <span class=\"function\">function</span>()</span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"string\">'path_to_my_file.pdf'</span>;</div><div class=\"line\">    return Response<span class=\"value\">::<span class=\"function\">download</span>(<span class=\"variable\">$file</span>, <span class=\"number\">418</span>, <span class=\"function\">array</span>(<span class=\"string\">'iron'</span>, <span class=\"string\">'man'</span>));</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n","source":"_posts/Laravel/Responses.md","raw":"title: Lavavel响应\ndate: 2014-10-31 15:45:11\ntags: \n---\n\n\n# 响应\n\n## 视图响应\n\n模板文件：\n\n```\n<html lang=\"en\">\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Views!</title>\n</head>\n<body>\n    <p>Oh yeah! VIEWS!</p>\n</body>\n</html>\n```\n\n路由定义：\n```\n// app/routes.php\nRoute::get('/', function()\n{\n    return View::make('simple');\n});\n```\n\n### 向视图中传递数据\n\n```\nRoute::get('/{squirrel}', function($squirrel)\n{\n    $data['squirrel'] = $squirrel;\n    return View::make('simple', $data);\n});\n\n<!-- app/views/simple.php -->\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Squirrels</title>\n</head>\n<body>\n    <p>I wish I were a <?php echo $squirrel; ?> squirrel!</p>\n</body>\n</html>\n```\n\n重定向\n```\n// app/routes.php\nRoute::get('first', function()\n{\n    return Redirect::to('second');\n});\nRoute::get('second', function()\n{\n    return 'Second route.';\n});\n```\n重定向在用户认证中的应用\n\n```\n// app/routes.php\nRoute::get('books', function()\n{\n    if (Auth::guest()) return Redirect::to('login');\n    // Show books to only logged in users.\n});\n```\n可定制的服务器响应\n\n定制响应的“头信息”\n\n```\n// app/routes.php\nRoute::get('markdown/response', function()\n{\n    $response = Response::make('***some bold text***', 200);\n    $response->headers->set('Content-Type', 'text/x-markdown');\n    return $response;\n});\n```\n定制响应的“存活时间”\n\n存活时间 Time-to-live 这个时间以秒为单位，它是数据包可以生存的时间。在传输中，如果超过了这个时间，这个数据报就被认为丢失了，或在一个循环内并且被废弃。\n\n```\n// app/routes.php\nRoute::get('our/response', function()\n{\n    $response = Response::make('Bond, James Bond.', 200);\n    $response->setTtl(60);\n    return $response;\n});\n```\nResponse 的 API\n> [TheSymfonyResponseObject](http://api.symfony.com/2.2/Symfony/Component/HttpFoundation/Response.html)\n\nRespanse 的快捷方法\n\nJSON 响应\n\n```\n// app/routes.php\nRoute::get('markdown/response', function()\n{\n    $data = array('iron', 'man', 'rocks');\n    return Response::json($data);\n});\n```\n浏览器将输出 `[\"iron\",\"man\",\"rocks\"]`\n\n下载 响应\n\n```\n// app/routes.php\nRoute::get('file/download', function()\n{\n    $file = 'path_to_my_file.pdf';\n    return Response::download($file);\n});\n```\n可定制 HTTP 状态码、头信息\n\n```\n// app/routes.php\nRoute::get('file/download', function()\n{\n    $file = 'path_to_my_file.pdf';\n    return Response::download($file, 418, array('iron', 'man'));\n});\n```","slug":"Laravel/Responses","updated":1421134711000,"excerpt":"","_id":"1n343u1u8t9ili35","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Lavavel路由","date":1414741511000,"tags":[],"content":"<h1 id=\"路由\">路由</h1>\n<ul>\n<li><a href=\"#basic\">基础路由</a>  </li>\n<li><a href=\"#type\">路由类型</a>  </li>\n<li><a href=\"#closure\">匿名函数</a>  </li>\n<li><a href=\"#parameter\">路由参数</a>  <ul>\n<li><a href=\"#must\">必填参数</a>  </li>\n<li><a href=\"#notmust\">可选参数</a>  </li>\n</ul>\n</li>\n</ul>\n<p><a name=\"basic\"></a></p>\n<h2 id=\"基础路由\">基础路由</h2>\n<p>URL 地址：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//mydomain.app/my/page</span></div></pre></td></tr></table></figure>\n\n<p>对应的路由设置：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::<span class=\"keyword\">get</span>(<span class=\"string\">'my/page'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p><a name=\"type\"></a></p>\n<h2 id=\"路由类型\">路由类型</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">get</span>();</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">post</span>();</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">put</span>();</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">delete</span>();</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">any</span>();</span></div></pre></td></tr></table></figure>\n\n<p>分别对应 GET(查看) POST(新增) PUT(修改) DELETE(删除) 这4种URL请求类型。<br>而 <code>Route::any();</code> 则是包含了以上4种请求类型。</p>\n<p><a name=\"closure\"></a></p>\n<h2 id=\"匿名函数\">匿名函数</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\"><span class=\"variable\">$logic</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\">}</div><div class=\"line\">Route::get(<span class=\"string\">'my/page'</span>, <span class=\"variable\">$logic</span>);</div></pre></td></tr></table></figure>\n\n<p><a name=\"parameter\"></a></p>\n<h2 id=\"路由参数\">路由参数</h2>\n<p><a name=\"must\"></a></p>\n<h3 id=\"必填参数\">必填参数</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::get(<span class=\"string\">'/books/{genre}'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$genre</span>)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Books in the {$genre} category.\"</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>以上路由指向 <a href=\"http://mydomain.app/books/crime\" target=\"_blank\" rel=\"external\">http://mydomain.app/books/crime</a> 并且地址中 $genre 参数必须存在。</p>\n<p><a name=\"notmust\"></a></p>\n<h3 id=\"可选参数\">可选参数</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\"><span class=\"comment\">// routes for the books section</span></div><div class=\"line\">Route::get(<span class=\"string\">'/books/{genre?}'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$genre</span> = <span class=\"string\">'Crime'</span>)</span></span></div><div class=\"line\">{</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"Books in the {$genre} category.\"</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>此时 <a href=\"http://mydomain.app/books/\" target=\"_blank\" rel=\"external\">http://mydomain.app/books/</a> 也指向这个路由，并使用默认值 Crime。</p>\n","source":"_posts/Laravel/route.md","raw":"title: Lavavel路由\ndate: 2014-10-31 15:45:11\ntags: \n---\n\n\n\n# 路由\n- [基础路由](#basic)  \n- [路由类型](#type)  \n- [匿名函数](#closure)  \n- [路由参数](#parameter)  \n    - [必填参数](#must)  \n    - [可选参数](#notmust)  \n\n\n<a name=\"basic\"></a>\n## 基础路由\n\nURL 地址：\n```\nhttp://mydomain.app/my/page\n```\n对应的路由设置：\n```\n// app/routes.php\nRoute::get('my/page', function()\n{\n    return 'Hello world!';\n});\n```\n<a name=\"type\"></a>\n## 路由类型\n\n```\nRoute::get();\nRoute::post();\nRoute::put();\nRoute::delete();\nRoute::any();\n```\n\n分别对应 GET(查看) POST(新增) PUT(修改) DELETE(删除) 这4种URL请求类型。 \n而 `Route::any();` 则是包含了以上4种请求类型。\n\n<a name=\"closure\"></a>\n## 匿名函数\n```\n// app/routes.php\n$logic = function()\n{\n    return 'Hello world!';\n}\nRoute::get('my/page', $logic);\n```\n\n<a name=\"parameter\"></a>\n## 路由参数\n\n<a name=\"must\"></a>\n### 必填参数\n```\n// app/routes.php\nRoute::get('/books/{genre}', function($genre)\n{\n    return \"Books in the {$genre} category.\";\n});\n```\n以上路由指向 http://mydomain.app/books/crime 并且地址中 $genre 参数必须存在。\n\n<a name=\"notmust\"></a>\n### 可选参数\n```\n// app/routes.php\n// routes for the books section\nRoute::get('/books/{genre?}', function($genre = 'Crime')\n{\nreturn \"Books in the {$genre} category.\";\n});\n```\n此时 http://mydomain.app/books/ 也指向这个路由，并使用默认值 Crime。","slug":"Laravel/route","updated":1421134507000,"excerpt":"","_id":"thpzkj6z579zoq99","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Lavavel过滤器","date":1414741511000,"tags":[],"content":"<h1 id=\"过滤器\">过滤器</h1>\n<h2 id=\"基础过滤器\">基础过滤器</h2>\n<p>定义过滤器：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/filters.php</span></div><div class=\"line\">Route::filter(<span class=\"string\">'birthday'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (date(<span class=\"string\">'d/m'</span>) == <span class=\"string\">'12/12'</span>)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">return</span> View::make(<span class=\"string\">'birthday'</span>);</div><div class=\"line\">    }</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>路由中的调用方法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::get(<span class=\"string\">'/'</span>, <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'before'</span> =&gt; <span class=\"string\">'birthday'</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">return</span> View::make(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    }</div><div class=\"line\">));</div></pre></td></tr></table></figure>\n\n<h2 id=\"多重过滤\">多重过滤</h2>\n<p>采用“|”分隔，或数组定义</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::get(<span class=\"string\">'/'</span>, <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'before'</span> =&gt; <span class=\"string\">'birthday|christmas'</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">return</span> View::make(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    }</div><div class=\"line\">));</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::get(<span class=\"string\">'/'</span>, <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'before'</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">'birthday'</span>, <span class=\"string\">'christmas'</span>),</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">return</span> View::make(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    }</div><div class=\"line\">));</div></pre></td></tr></table></figure>\n\n<h2 id=\"过滤器参数\">过滤器参数</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/filters.php</span></div><div class=\"line\"><span class=\"comment\">// before 前置过滤器</span></div><div class=\"line\">Route::filter(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$route</span>, <span class=\"variable\">$request</span>)</span></span></div><div class=\"line\">{</div><div class=\"line\">});</div><div class=\"line\"><span class=\"comment\">// after 后置过滤器</span></div><div class=\"line\">Route::filter(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$route</span>, <span class=\"variable\">$request</span>, <span class=\"variable\">$response</span>)</span></span></div><div class=\"line\">{</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>向过滤器中传递额外的参数</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route::get(<span class=\"string\">'/'</span>, <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"string\">'before'</span> =&gt; <span class=\"string\">'birthday:foo,bar,baz'</span>,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">return</span> View::make(<span class=\"string\">'hello'</span>);</div><div class=\"line\">    }</div><div class=\"line\">));</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// app/filters.php</span></div><div class=\"line\">Route::filter(<span class=\"string\">'birthday'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$route</span>, <span class=\"variable\">$request</span>, <span class=\"variable\">$first</span>, <span class=\"variable\">$second</span>, <span class=\"variable\">$third</span>)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"{$first} - {$second} - {$third}\"</span>;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<h2 id=\"使用类文件来作为过滤器\">使用类文件来作为过滤器</h2>\n<p>首先确保已经 注册 laravel 的类加载目录</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// app/start/global.php</div><div class=\"line\">ClassLoader::addDirectories(array(</div><div class=\"line\">    <span class=\"keyword\">...</span></div><div class=\"line\">    app_path().<span class=\"string\">'/filters'</span>,  //  如需使用过滤器类，请添加</div><div class=\"line\">    <span class=\"keyword\">...</span></div><div class=\"line\">));</div></pre></td></tr></table></figure>\n\n<p>接着定义过滤器类文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// app/filters/Birthday.php</div><div class=\"line\">class BirthdayFilter {</div><div class=\"line\">    <span class=\"keyword\">...</span></div><div class=\"line\">    public <span class=\"keyword\">function</span> filter($route, $request, $date)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">if</span> (date(<span class=\"string\">'d/m'</span>) == $date)</div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"keyword\">return</span> View::make(<span class=\"string\">'birthday'</span>);</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">...</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">// app/routes.php</div><div class=\"line\">Route::filter(<span class=\"string\">'birthday'</span>, <span class=\"string\">'BirthdayFilter'</span>);</div></pre></td></tr></table></figure>\n\n<p>注意： 最终执行的是类中的 filter() 方法，并且新定义的类需要执行一次 php artisan dump-autoload 指令以帮助其载入。</p>\n<h2 id=\"全局过滤器\">全局过滤器</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/filters.php</span></div><div class=\"line\">App::before(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$request</span>)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">});</div><div class=\"line\">App::after(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(<span class=\"variable\">$request</span>, <span class=\"variable\">$response</span>)</span></span></div><div class=\"line\">{</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<h2 id=\"模式过滤器\">模式过滤器</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/routes.php</span></div><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">when</span>(<span class=\"string\">'profile/*'</span>, <span class=\"string\">'birthday'</span>);</span></div></pre></td></tr></table></figure>\n\n<p>以上代码将匹配所有 profile/ 开头的路由，来使用 birthday 作为前置过滤器。<br>还可以针对 HTTP 请求类型 限定模式过滤器：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route<span class=\"value\">::<span class=\"function\">when</span>(<span class=\"string\">'admin/*'</span>, <span class=\"string\">'admin'</span>, <span class=\"function\">array</span>(<span class=\"string\">'post'</span>));</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/Laravel/filter.md","raw":"title: Lavavel过滤器\ndate: 2014-10-31 15:45:11\ntags: \n---\n\n\n\n# 过滤器\n\n## 基础过滤器\n\n定义过滤器：\n\n```\n// app/filters.php\nRoute::filter('birthday', function()\n{\n    if (date('d/m') == '12/12')\n    {\n        return View::make('birthday');\n    }\n});\n```\n\n路由中的调用方法：\n```\n// app/routes.php\nRoute::get('/', array(\n    'before' => 'birthday',\n    function()\n    {\n        return View::make('hello');\n    }\n));\n```\n\n## 多重过滤\n\n采用“|”分隔，或数组定义\n```\n// app/routes.php\nRoute::get('/', array(\n    'before' => 'birthday|christmas',\n    function()\n    {\n        return View::make('hello');\n    }\n));\n \n// app/routes.php\nRoute::get('/', array(\n    'before' => array('birthday', 'christmas'),\n    function()\n    {\n        return View::make('hello');\n    }\n));\n```\n\n## 过滤器参数\n\n```\n// app/filters.php\n// before 前置过滤器\nRoute::filter('test', function($route, $request)\n{\n});\n// after 后置过滤器\nRoute::filter('test', function($route, $request, $response)\n{\n});\n```\n\n向过滤器中传递额外的参数\n\n```\n// app/routes.php\nRoute::get('/', array(\n    'before' => 'birthday:foo,bar,baz',\n    function()\n    {\n        return View::make('hello');\n    }\n));\n \n// app/filters.php\nRoute::filter('birthday', function($route, $request, $first, $second, $third)\n{\n    return \"{$first} - {$second} - {$third}\";\n});\n```\n\n## 使用类文件来作为过滤器\n\n首先确保已经 注册 laravel 的类加载目录\n\n```\n// app/start/global.php\nClassLoader::addDirectories(array(\n    ...\n    app_path().'/filters',  //  如需使用过滤器类，请添加\n    ...\n));\n```\n接着定义过滤器类文件\n\n```\n// app/filters/Birthday.php\nclass BirthdayFilter {\n    ...\n    public function filter($route, $request, $date)\n    {\n        if (date('d/m') == $date)\n        {\n            return View::make('birthday');\n        }\n    }\n    ...\n}\n\n// app/routes.php\nRoute::filter('birthday', 'BirthdayFilter');\n```\n注意： 最终执行的是类中的 filter() 方法，并且新定义的类需要执行一次 php artisan dump-autoload 指令以帮助其载入。\n\n## 全局过滤器\n\n```\n// app/filters.php\nApp::before(function($request)\n{\n    //\n});\nApp::after(function($request, $response)\n{\n    //\n});\n```\n## 模式过滤器\n\n```\n// app/routes.php\nRoute::when('profile/*', 'birthday');\n```\n\n以上代码将匹配所有 profile/ 开头的路由，来使用 birthday 作为前置过滤器。 \n还可以针对 HTTP 请求类型 限定模式过滤器：\n\n```\nRoute::when('admin/*', 'admin', array('post'));\n```","slug":"Laravel/filter","updated":1421134476000,"excerpt":"","_id":"6exbch5hgo2gu2ah","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"composer,satis","_id":"evmmxmr9aklj4q5q","posts":[]},{"name":"composer satis","_id":"he2es5qrp4noms9u","posts":["6ghwr178401xv4c3"]},{"name":"测试驱动开发 TDD php","_id":"b7zecapjmpjw0wbh","posts":["krw4ido6mdfw9wcl"]},{"name":"taoanton的博客","_id":"64quig3qq9nst2f8","posts":["qvs5uvfp4qqnhs0e"]}]}